db.getCollection("endcustomers").updateMany({ "groupData.teamMemberReply":null }, { $set: { "groupData.teamMemberReply": ObjectId("64a6f75db141e5443f034416"),"groupData.assignedBy" : "Chat Assigned By Someone to you" } })



----------------------------------------------------------------------

			
const duplicateCustomers = await secondary.model(constants.MODELS.endcustomers, endCustomers).aggregate([
                            { $match: { isDelete: false, mobileNo: { $type: "string", $regex: /^[0-9]+$/ } } },
                            {
                                $addFields: {
                                    lastNineDigits: {
                                        $cond: {
                                            if: { $gte: [{ $strLenCP: "$mobileNo" }, 10] },
                                            then: {
                                                $substrBytes: [
                                                    "$mobileNo",
                                                    { $subtract: [{ $strLenCP: "$mobileNo" }, 10] },
                                                    10
                                                ]
                                            },
                                            else: null
                                        }
                                    }
                                }
                            },
                            { $group: { _id: '$lastNineDigits', dups: { $push: "$_id" }, count: { $sum: 1 } } },
                            { $match: { count: { $gt: 1 } } }
                        ]);


----------------------------------------------------------------------

const pipeline = [
                    {
                        $match: {
                            broadcastData: { $exists: true },
                            timestamp: { $gte: startTimestamp, $lte: endTimestamp }
                        },
                    },
                    {
                        $lookup: {
                            from: 'msgstatuses',
                            localField: 'messageId',
                            foreignField: 'messageId',
                            as: 'userData',
                        },
                    },
                    {
                        $lookup: {
                            from: 'broadcasts',
                            localField: 'broadcastData.broadcastId',
                            foreignField: '_id',
                            as: 'broadcastdata',
                        },
                    },
                    {
                        $unwind: '$broadcastdata',
                    },
                    {
                        $unwind: '$userData',
                    },
                    {
                        $group: {
                            _id: '$to',
                            Bdata: {
                                $push: {
                                    BroadCastData: '$broadcastdata.broadcastcustomename',
                                    Template: '$sentTemplate.name',
                                    Date: "$broadcastdata.timestamp",
                                    Status: '$userData.status',
                                },
                            },
                            customername: {
                                $first: {
                                    $cond: [
                                        {
                                            $and: [
                                                { $ne: ['$broadcastData.Customer_Name', null] },
                                                { $ne: ['$broadcastData.Customer_Name', ''] },
                                            ],
                                        },
                                        '$broadcastData.Customer_Name',
                                        '',
                                    ],
                                },
                            },
                        },
                    },
                ]

----------------------------------------------------------------------

if (status !== "notsent") {
                            if (status != "") {
                                query.status = status;
                            }
                            pipeline.push(
                                {
                                    $lookup: {
                                        from: 'msgstatuses',
                                        localField: 'messageId',
                                        foreignField: 'messageId',
                                        as: 'userData',
                                    },
                                },
                                {
                                    $unwind: {
                                        path: '$userData',
                                        preserveNullAndEmptyArrays: true,
                                    },
                                },
                                {
                                    $addFields: {
                                        status: { $ifNull: ['$userData.status', ''] },
                                        detail: { $ifNull: ['$userData.details.message', ''] },
                                        timestamp: { $ifNull: ['$userData.timestamp', ''] },
                                    },
                                },
                                {
                                    $match: query
                                }
                            );
                        } else {
                            pipeline.push(
                                {
                                    $match: {
                                        $or: [
                                            { messageId: { $exists: false } },
                                            { messageId: null },
                                        ],
                                    },
                                }
                            );
                        }
                        pipeline.push(
                            {
                                $project: {
                                    userData: 0,
                                }
                            }
                        );

                        var options = {
                            page: page,
                            limit: parseInt(limit),
                            sort: { created_time: filterSort },
                            lean: true
                        }
                        let Data = secondary
                            .model(constants.MODELS.metaleadgens, metaleadgensModel).aggregate(pipeline);

                        secondary.model(constants.MODELS.metaleadgens, metaleadgensModel).aggregatePaginate(Data, options).then((results) => {
                            const finalData = results.docs.map(processMetalead);
                            results.docs = finalData;
                            return ResponseManager.onSuccess("Meta Lead List", results, res);
                        })

----------------------------------------------------------------------

query = {
                planDetails: { $exists: true },
                'enabledNotification.status': true,
                $expr: {
                    $eq: [
                        {
                            $dateDiff: {
                                startDate: new Date(),
                                endDate: { $toDate: "$planDetails.endDate" },
                                unit: "day"
                            }
                        },
                        daysBeforeExpiration
                    ]
                }
            };


----------------------------------------------------------------------

{
                                    $addFields: {
                                        status: { $ifNull: ['$userData.status', ''] },
                                        detail: { $ifNull: ['$userData.details.message', ''] },
                                        timestamp: { $ifNull: ['$userData.timestamp', ''] },
                                    },
                                },

----------------------------------------------------------------------

const pipeline = [{
                $lookup: {
                    from: "inbounds",
                    let: { mobileNo: "$mobileNo" },
                    pipeline: [
                        {
                            $match: {
                                content: { $exists: true },
                                $expr: {
                                    $or: [
                                        { $eq: ["$to", "$$mobileNo"] },
                                        { $eq: ["$from", "$$mobileNo"] }
                                    ]
                                }
                            }
                        },
                        {
                            $sort: { "_id": -1 }
                        },
                        { $limit: 1 }
                    ],
                    as: "latestInbound"
                }
            },
            {
                $unwind: {
                    path: "$latestInbound",
                    preserveNullAndEmptyArrays: true
                }
            },
            {
                $match: {
                    ...query,
                    'groupData.teamMemberReply': req.token.teamMemberId,
                    'groupData.teamId': null,
                    $or: [
                        { isSpam: false },
                        { isSpam: { $exists: false } }
                    ],
                    isDelete: { $ne: true },
                    $and: [
                        {
                            $or: [
                                { name: regex },
                                { mobileNo: regex }
                            ]
                        },
                        {
                            $or: [
                                { isSpam: false },
                                { isSpam: { $exists: false } }
                            ]
                        }
                    ]
                }
            },
            {
                $facet: {
                    totalDocs: [
                        { $count: "total" }
                    ],
                    docs: [
                        { $skip: (page - 1) * limit },
                        { $limit: limit },
                    ]
                },
            }]


-----------------------------------------------------------------------


let results = await secondary.model(constants.MODELS.inbounds, inBounds).aggregate([
                {
                    $match: { "broadcastData.broadcastId": config.mongoose.Types.ObjectId(req.body.bid) }
                },
                {
                    $lookup: {
                        from: constants.MODELS.msgstatus,
                        localField: "messageId",
                        foreignField: "messageId",
                        as: "join1"
                    }
                },
                {
                    $unwind: "$join1"
                },
                {
                    $lookup: {
                        from: constants.MODELS.links,
                        let: { join1Field3: "$join1.messageId" },
                        pipeline: [
                            {
                                $match: {
                                    $expr: {
                                        $or: [
                                            { $eq: ["$meta_message_id", "$$join1Field3"] },
                                            { $eq: ["$meta_message_id", null] } // Include documents with no match in collection3
                                        ]
                                    }
                                }
                            }
                        ],
                        as: "join2"
                    }
                },
                {
                    $unwind: { path: "$join2", preserveNullAndEmptyArrays: true }
                },
                {
                    $project: {
                        messageid: "$messageId",
                        from: "$from",
                        to: "$to",
                        customer: "$broadcastData.Customer_Name",
                        channel: "WhatsApp",
                        status: "$join1.status",
                        response: "$broadcastData.Response",
                        reason: { $ifNull: ["$join1.details.message", ""] },
                        clicks: { $ifNull: ["$join2.clicks", 0] },
                        date: new Date()
                    }
                }
            ])

-----------------------------------------------------------------------------



let results = await secondary.model(constants.MODELS.inbounds, inBound).aggregate([
                                    {
                                        $match: { "sentTemplate._id": tid, "timestamp": { "$gte": starttimestamp, "$lte": endtimestamp } }
                                    },
                                    {
                                        $lookup: {
                                            from: constants.MODELS.msgstatus,
                                            localField: "messageId",
                                            foreignField: "messageId",
                                            as: "join1"
                                        }
                                    },
                                    {
                                        $unwind: {
                                            path: "$join1",
                                            preserveNullAndEmptyArrays: true  // Preserve documents even if there's no matching entry in the lookup collection
                                        }
                                    },
                                    {
                                        $lookup: {
                                            from: constants.MODELS.links,
                                            let: { join1Field3: "messageId" },
                                            pipeline: [
                                                {
                                                    $match: {
                                                        $expr: {
                                                            $or: [
                                                                { $eq: ["$meta_message_id", "$$join1Field3"] },
                                                                { $eq: ["$meta_message_id", null] } // Include documents with no match in collection3
                                                            ]
                                                        }
                                                    }
                                                }
                                            ],
                                            as: "join2"
                                        }
                                    },
                                    {
                                        $unwind: { path: "$join2", preserveNullAndEmptyArrays: true }
                                    },
                                    {
                                        $project: {
                                            from: "$from",
                                            to: "$to",
                                            messageid: "$messageId",
                                            status: { $ifNull: ["$join1.status", "$messageStatus.status"] },
                                            response: { $ifNull: ["$broadcastData.Response", ""] },
                                            clicks: { $ifNull: ["$join2.clicks", 0] },
                                            date: new Date("$timestamp")
                                        }
                                    }
                                ])


-----------------------------------------------------------------------------


const rulesMessages = await secondary.model(constants.MODELS.inbounds, inBound).aggregate([
            { $match: { autoreplyruleid: config.mongoose.Types.ObjectId(arid) } },
            { $sort: { timestamp: 1 } },
            {
                $lookup: {
                    from: constants.MODELS.inbounds,
                    localField: 'messageId',
                    foreignField: 'context.messageId',
                    as: 'userMessages'
                }
            },
            { $unwind: "$userMessages" },
            {
                $project: {
                    from: "$userMessages.from",
                    to: "$userMessages.to",
                    business_messageid: "$messageId",
                    user_messageid: "$userMessages.messageId",
                    response: {
                        $ifNull: [
                            "$userMessages.whatsapp.text",
                            {
                                $ifNull: [
                                    "$userMessages.whatsapp.title",
                                    "$userMessages.content.text"
                                ]
                            }
                        ]
                    },
                    date: "$userMessages.timestamp"
                }
            }
        ]);

-------------------------------------------------------------------------------


db.getCollection("products").find({}).forEach(function(doc) {
    if (typeof doc.productId === "string") {
        var numericalProductId = parseFloat(doc.productId);
        console.log(numericalProductId)
        db.getCollection("products").updateOne(
            { _id: doc._id },
            { $set: {  productId: numericalProductId } }
        );
    }
});



-------------------------------------------------------------------------------------



var aggregate = secondary.model(constants.MODELS.balanceuses, balanceusesModel).aggregate()
				aggregate.match({
					timestamp: { $gte: startDate, $lte: endDate }
				})
					.group({
						_id: {
							origin: "$whatsapp.conversation.origin",
							createdAt: {
								$dateToString: {
									format: "%Y-%m-%d",
									date: "$timestamp"
								}
							}
						},
						messageCount: {
							$sum: 1
						},
						messageCost: {
							$sum: "$messageCost"
						}
					})
					.sort({
						"_id.createdAt": 1,
						messageCount: -1
					})
					.group({
						_id: "$_id.createdAt",
						totalMessageCount: {
							$sum: "$messageCount"
						},
						totalMessageCost: {
							$sum: "$messageCost"
						},
						origins: {
							$push: {
								origin: "$_id.origin",
								messageCount: "$messageCount",
								messageCost: "$messageCost"
							}
						}
					})
					.sort({
						_id: -1
					})
				var options = {
					page: page,
					limit: parseInt(limit),
					sort: { _id: -1 },
					lean: true
				}
				secondary.model(constants.MODELS.balanceuses, balanceusesModel).aggregatePaginate(aggregate, options).then(function (results) {
					// console.log("results:::::",results);
					return ResponseManager.onSuccess("balance and usage", results, res);
				}).catch(function (err) {
					console.log(err);
				})


--------------------------------------------------------------------------------



db.getCollection("endcustomers").aggregate([
    {
        $match: {
            mobileNo: { $in: ["918866186841","919023523406"] },
            $or: [
                { isDelete: { $eq: false } },
                { isDelete: { $eq: null } },
                { isDelete: { $exists: false } }
            ],
            conversation: { $exists: true }
        }
    },
    {
        $addFields: {
            filteredConversations: {
                $filter: {
                    input: "$conversation",
                    as: "conv",
                    cond: { $eq: ["$$conv.origin", "utility"] }
                }
            }
        }
    },
    {
        $addFields: {
            expiresAtTime: {
                $map: {
                    input: "$filteredConversations",
                    as: "conv",
                    in: { $toDate: "$$conv.expiresAt" }
                }
            }
        }
    },
    {
        $addFields: {
            validConversations: {
                $filter: {
                    input: "$filteredConversations",
                    as: "conv",
                    cond: { $gte: [{ $toDate: "$$conv.expiresAt" }, new Date()] }
                }
            }
        }
    },
    {
        $match: {
            "validConversations.0": { $exists: true }
        }
    }
])

------------------------------------------------------------------
update specific element in array of objs

await secondary.model(constants.MODELS.endcustomers, endCustomers).updateOne(
                            { _id: req.body.customerId, "addresses.id": req.body.addressIndexId },
                            {
                                $set: {
                                    "addresses.$.value": { ...req.body.address }
                                }
                            }
                        );


secondary.model(constants.MODELS.endcustomers, endCustomers).updateOne
                                    ({
                                        _id: req.body.customerId
                                    }, {
                                        $pull: {addresses: {id: req.body.addressIndexId}
                                        }
                                    });
                            });
---------------------------------------------------------------------------------