Sure! Let's go through examples of `reduce` and `flatMap` in JavaScript.

### Example 1: Using `reduce`

The `reduce` method is used to reduce an array to a single value by executing a reducer function on each element of the array.

#### Example: Summing Up an Array of Numbers

```javascript
const numbers = [10, 20, 30, 40];

const sum = numbers.reduce((accumulator, currentValue) => {
  return accumulator + currentValue;
}, 0);

console.log(sum); // Output: 100
```

- **Explanation:**
  - `accumulator` is the accumulated value previously returned in the last iteration.
  - `currentValue` is the current element being processed.
  - `0` is the initial value of the accumulator.

In each iteration:
- **1st iteration:** `accumulator = 0`, `currentValue = 10` → `accumulator + currentValue = 10`
- **2nd iteration:** `accumulator = 10`, `currentValue = 20` → `accumulator + currentValue = 30`
- **3rd iteration:** `accumulator = 30`, `currentValue = 30` → `accumulator + currentValue = 60`
- **4th iteration:** `accumulator = 60`, `currentValue = 40` → `accumulator + currentValue = 100`

### Example 2: Using `flatMap`

The `flatMap` method first maps each element using a mapping function, then flattens the result into a new array. It's like doing a `map` followed by `flat` (with a depth of 1) in a single pass.

#### Example: Splitting and Flattening an Array of Strings

```javascript
const sentences = [
  "Hello world",
  "How are you",
  "Goodbye"
];

const words = sentences.flatMap(sentence => sentence.split(" "));

console.log(words);
// Output: ["Hello", "world", "How", "are", "you", "Goodbye"]
```

- **Explanation:**
  - `flatMap` applies the `split` function to each sentence, which splits the string into an array of words.
  - Then, it flattens the resulting arrays into a single array.

Here’s what happens:
- **Before flattening:** `[["Hello", "world"], ["How", "are", "you"], ["Goodbye"]]`
- **After flattening:** `["Hello", "world", "How", "are", "you", "Goodbye"]`

### Example 3: Combining `reduce` and `flatMap`

Sometimes, you might want to combine both `reduce` and `flatMap` for more complex operations.

#### Example: Flattening and Summing Arrays of Numbers

```javascript
const nestedNumbers = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

const flattenedSum = nestedNumbers
  .flatMap(array => array)    // Flatten the arrays
  .reduce((acc, num) => acc + num, 0);  // Sum up the flattened array

console.log(flattenedSum); // Output: 45
```

- **Explanation:**
  - `flatMap` flattens the nested arrays into a single array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`.
  - `reduce` then sums up the elements of the flattened array.

These examples should help clarify how `reduce` and `flatMap` can be used to perform array transformations and calculations in JavaScript.
















console.log(process.argv)

let numbers = process.argv.slice(2, process.argv.length)
console.log(numbers);
let arr = [
    ["Saud", "Shah"],
    ["Deepak", "Aggarwal"],
    ["Sagar", "Kheni"]
]
let arr2 = [
    { name: ["Saud", "Shah"] },
    { name: ["Deepak", "Aggarwal"] },
    { name: ["Sagar", "Kheni"] }
]
let arr3 = [
    { marks: ["1", "2"] },
    { marks: ["3", "4"] },
    { marks: ["5", "6"] }
]
let newArr = arr.flatMap((el) => el);
let newArr1 = arr2.flatMap((el) => el.name);
let newArr2 = arr3.flatMap((el) => el.marks).reduce((sum, currentVal) => {
    return Number(sum) + Number(currentVal)
}, 0);
console.log("newArr", newArr);
console.log("newArr1", newArr1);
console.log("newArr2", newArr2);
let sum = numbers.reduce((sum, currentVal) => {
    return Number(sum) + Number(currentVal)
}, 10)

console.log("Sum", sum);







