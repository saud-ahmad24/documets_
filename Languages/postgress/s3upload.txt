To upload files to **AWS S3** using **`@aws-sdk/client-s3`** with a **Blob** instead of reading from the file system, you need to handle the incoming file as a **buffer** or blob directly (common in scenarios where files are processed in memory, such as API services or client uploads).

Here is a complete solution for using a **Blob** with `@aws-sdk/client-s3` and **Multer**:

---

### **1. Install Dependencies**

Install required packages:

```bash
npm install @aws-sdk/client-s3 multer
```

---

### **2. Set Up AWS S3 Client**

Configure the **S3 client** using `@aws-sdk/client-s3`.

#### `s3Client.js`
```javascript
const { S3Client } = require("@aws-sdk/client-s3");

// Initialize S3 client
const s3Client = new S3Client({
  region: process.env.AWS_REGION, // AWS Region
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

module.exports = s3Client;
```

---

### **3. Configure Multer for Memory Storage**

Instead of saving files to disk, use Multer's **memoryStorage** to store uploaded files in memory as a **Buffer**. This allows us to send the file directly as a **Blob** to S3.

#### `upload.js`
```javascript
const multer = require("multer");

// Multer configuration: Store files in memory as Buffers
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 10 * 1024 * 1024 }, // Limit file size to 10MB
});

module.exports = upload;
```

---

### **4. Upload File to S3 as Blob**

Use the **buffer** from the Multer upload and send it to S3 using the `PutObjectCommand`.

#### `server.js`
```javascript
const express = require("express");
const { PutObjectCommand } = require("@aws-sdk/client-s3");
const s3Client = require("./s3Client");
const upload = require("./upload");

const app = express();
const port = 5000;

// Upload route (using memory storage and Blob)
app.post("/upload", upload.single("file"), async (req, res) => {
  try {
    // Check if file is uploaded
    if (!req.file) {
      return res.status(400).send("No file uploaded.");
    }

    // File details
    const { originalname, buffer, mimetype } = req.file;

    // Sanitize filename
    const sanitizedFilename = originalname.replace(/[^a-zA-Z0-9.-]/g, "-").toLowerCase();
    const fileKey = `${Date.now()}-${sanitizedFilename}`;

    // Upload file as Blob to S3
    const uploadParams = {
      Bucket: process.env.AWS_S3_BUCKET_NAME, // S3 bucket name
      Key: fileKey, // S3 object key (filename)
      Body: buffer, // File buffer (Blob)
      ContentType: mimetype, // MIME type
      ACL: "public-read", // Make file publicly accessible
    };

    await s3Client.send(new PutObjectCommand(uploadParams));

    // Generate S3 file URL
    const fileUrl = `https://${process.env.AWS_S3_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileKey}`;

    res.status(200).json({
      message: "File uploaded successfully",
      fileUrl: fileUrl,
    });
  } catch (error) {
    console.error("Error uploading file:", error);
    res.status(500).json({ error: "Failed to upload file" });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
```

---

### **5. Environment Variables**

Add your AWS credentials and bucket name to the `.env` file:

```env
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_access_key
AWS_REGION=your_aws_region
AWS_S3_BUCKET_NAME=your_bucket_name
```

---

### **How It Works**
1. **Multer**:
   - Uses `memoryStorage` to store the uploaded file as a **buffer** in memory.
2. **S3 Upload**:
   - The buffer (`req.file.buffer`) is directly sent to S3 using the `PutObjectCommand`.
   - The filename is sanitized and a unique timestamp is added to avoid overwriting files.
3. **S3 URL**:
   - The response includes the URL of the uploaded file.

---

### **Folder Structure**

```
project/
â”‚-- s3Client.js      # S3 client configuration
â”‚-- upload.js        # Multer configuration (memoryStorage)
â”‚-- server.js        # Main server file
â”‚-- .env             # Environment variables
â”‚-- package.json
```

---

### **Testing the API**

1. Run the server:
   ```bash
   node server.js
   ```

2. Use **Postman** or a frontend form to test the `/upload` endpoint:
   - **Method**: POST
   - **URL**: `http://localhost:5000/upload`
   - **Form Field**: `file` (file input)

---

### **Example Response**

```json
{
  "message": "File uploaded successfully",
  "fileUrl": "https://your-bucket-name.s3.your-region.amazonaws.com/1691234567890-myfile.png"
}
```

---

### **Frontend Form Example**
You can test the upload with a simple HTML form:

```html
<form action="http://localhost:5000/upload" method="POST" enctype="multipart/form-data">
  <input type="file" name="file" />
  <button type="submit">Upload</button>
</form>
```

---

### **Advantages of Using Blob**
- Files are processed in memory, so you don't need local disk storage.
- Faster processing for smaller files.
- Ideal for APIs that upload files directly to S3 without intermediate steps.

---

Let me know if you need any additional modifications or clarifications! ðŸš€