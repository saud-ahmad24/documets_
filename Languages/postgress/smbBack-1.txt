Building a backend for your e-commerce project in Node.js, PostgreSQL, and Sequelize involves structuring your API endpoints, defining the business logic for each product type, and implementing CRUD operations. Here’s an outline of the backend setup, including routes, controllers, and some sample code snippets to get started.

### Project Structure

A typical project structure could look like this:

```
project-root/
├── config/
│   └── config.js          # Database configuration
├── controllers/
│   ├── authController.js  # Authentication controllers (optional)
│   ├── productController.js
│   ├── orderController.js
│   ├── subscriptionController.js
│   └── packageController.js
├── models/
│   ├── index.js           # Sequelize instance and model associations
│   ├── User.js
│   ├── Product.js
│   ├── AddOn.js
│   ├── Package.js
│   ├── Order.js
│   ├── OrderItem.js
│   └── Subscription.js
├── routes/
│   ├── authRoutes.js      # Authentication routes
│   ├── productRoutes.js
│   ├── orderRoutes.js
│   ├── subscriptionRoutes.js
│   └── packageRoutes.js
├── services/
│   └── emailService.js    # Optional - for sending order or subscription confirmations
├── app.js                 # Express app setup
└── server.js              # Server entry point
```

### Backend Setup

1. **Initialize the Project and Install Dependencies**

   ```bash
   mkdir ecommerce-backend
   cd ecommerce-backend
   npm init -y
   npm install express sequelize pg pg-hstore dotenv
   ```

2. **Database Configuration (`config/config.js`)**

   Use environment variables to configure your database connection.

   ```javascript
   require('dotenv').config();

   module.exports = {
     development: {
       username: process.env.DB_USER,
       password: process.env.DB_PASS,
       database: process.env.DB_NAME,
       host: process.env.DB_HOST,
       dialect: 'postgres',
     },
     production: {
       username: process.env.DB_USER,
       password: process.env.DB_PASS,
       database: process.env.DB_NAME,
       host: process.env.DB_HOST,
       dialect: 'postgres',
     }
   };
   ```

3. **Initialize Sequelize (`models/index.js`)**

   Set up Sequelize, import models, and define associations.

   ```javascript
   const Sequelize = require('sequelize');
   const config = require('../config/config')[process.env.NODE_ENV || 'development'];

   const sequelize = new Sequelize(config.database, config.username, config.password, {
     host: config.host,
     dialect: config.dialect,
   });

   // Import models
   const User = require('./User')(sequelize, Sequelize);
   const Product = require('./Product')(sequelize, Sequelize);
   const AddOn = require('./AddOn')(sequelize, Sequelize);
   const Package = require('./Package')(sequelize, Sequelize);
   const Order = require('./Order')(sequelize, Sequelize);
   const OrderItem = require('./OrderItem')(sequelize, Sequelize);
   const Subscription = require('./Subscription')(sequelize, Sequelize);

   // Define relationships
   User.hasMany(Order);
   Order.belongsTo(User);
   
   Product.belongsToMany(AddOn, { through: 'ProductAddOn' });
   AddOn.belongsToMany(Product, { through: 'ProductAddOn' });

   Product.belongsToMany(Package, { through: 'PackageProduct' });
   Package.belongsToMany(Product, { through: 'PackageProduct' });

   Package.belongsToMany(AddOn, { through: 'PackageAddOn' });
   AddOn.belongsToMany(Package, { through: 'PackageAddOn' });

   User.hasMany(Subscription);
   Subscription.belongsTo(User);

   Product.hasMany(Subscription);
   Subscription.belongsTo(Product);

   Order.hasMany(OrderItem);
   OrderItem.belongsTo(Order);
   
   module.exports = {
     sequelize,
     Sequelize,
     User,
     Product,
     AddOn,
     Package,
     Order,
     OrderItem,
     Subscription,
   };
   ```

4. **Define Models (`models/Product.js` Example)**

   ```javascript
   module.exports = (sequelize, DataTypes) => {
     const Product = sequelize.define('Product', {
       name: { type: DataTypes.STRING, allowNull: false },
       description: { type: DataTypes.TEXT },
       price: { type: DataTypes.FLOAT, allowNull: false },
       isSubscription: { type: DataTypes.BOOLEAN, defaultValue: false },
       isPackage: { type: DataTypes.BOOLEAN, defaultValue: false },
     });
     return Product;
   };
   ```

   Repeat similarly for other models.

### Route and Controller Setup

#### Example Route and Controller Files

1. **Product Routes (`routes/productRoutes.js`)**

   ```javascript
   const express = require('express');
   const { getAllProducts, createProduct } = require('../controllers/productController');
   const router = express.Router();

   router.get('/', getAllProducts);
   router.post('/', createProduct);

   module.exports = router;
   ```

2. **Product Controller (`controllers/productController.js`)**

   ```javascript
   const { Product, AddOn } = require('../models');

   // Get all products
   exports.getAllProducts = async (req, res) => {
     try {
       const products = await Product.findAll({ include: AddOn });
       res.status(200).json(products);
     } catch (error) {
       res.status(500).json({ error: error.message });
     }
   };

   // Create a product
   exports.createProduct = async (req, res) => {
     try {
       const product = await Product.create(req.body);
       res.status(201).json(product);
     } catch (error) {
       res.status(500).json({ error: error.message });
     }
   };
   ```

#### Example CRUD Operations for Subscription Products

**Subscription Routes (`routes/subscriptionRoutes.js`)**

```javascript
const express = require('express');
const { subscribeToProduct, getSubscriptions } = require('../controllers/subscriptionController');
const router = express.Router();

router.post('/subscribe', subscribeToProduct);
router.get('/', getSubscriptions);

module.exports = router;
```

**Subscription Controller (`controllers/subscriptionController.js`)**

```javascript
const { Subscription, Product, User } = require('../models');

// Subscribe to a product
exports.subscribeToProduct = async (req, res) => {
  const { userId, productId } = req.body;

  try {
    const product = await Product.findByPk(productId);

    if (!product || !product.isSubscription) {
      return res.status(400).json({ error: 'Invalid subscription product' });
    }

    const subscription = await Subscription.create({
      userId,
      productId,
      status: 'active',
      startDate: new Date(),
      renewalDate: new Date(new Date().setMonth(new Date().getMonth() + 1)) // Example renewal date
    });

    res.status(201).json(subscription);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get all subscriptions for a user
exports.getSubscriptions = async (req, res) => {
  try {
    const subscriptions = await Subscription.findAll({
      where: { userId: req.query.userId },
      include: Product
    });
    res.status(200).json(subscriptions);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

### Main Application File (`app.js`)

```javascript
const express = require('express');
const { sequelize } = require('./models');

const productRoutes = require('./routes/productRoutes');
const subscriptionRoutes = require('./routes/subscriptionRoutes');

const app = express();

app.use(express.json());
app.use('/products', productRoutes);
app.use('/subscriptions', subscriptionRoutes);

sequelize.sync().then(() => {
  console.log('Database synced');
}).catch(err => console.error('Database sync error:', err));

module.exports = app;
```

### Starting the Server (`server.js`)

```javascript
const app = require('./app');
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### Summary

This backend structure provides a foundation for an e-commerce system that can handle:
- Different product types (subscriptions, one-off, packages).
- Add-ons for products and packages.
- A relational database using PostgreSQL and Sequelize.

Each section can be extended with additional logic (like authentication, authorization, and payment processing) as required. Let me know if you'd like further details on any part!