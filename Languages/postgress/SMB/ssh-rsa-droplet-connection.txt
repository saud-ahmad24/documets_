Since you **lost both the SSH key and password**, you can regain access to your **DigitalOcean Droplet** by following these steps:

---

## **1️⃣ Use DigitalOcean Recovery Console (No SSH Needed)**
1. **Go to DigitalOcean Dashboard → Droplets.**
2. Click on your **Droplet name**.
3. **Go to the "Access" tab**.
4. Click **Launch Recovery Console**.

This opens a web-based terminal where you can run commands as `root`.

---

## **2️⃣ Add a New SSH Key (Recommended)**
Once inside the **Recovery Console**, generate a new SSH key on your **local PC** (Windows, Mac, or Linux):

### **🔹 Step 1: Generate a New SSH Key on Your PC**
On your **local machine**, run:
```bash
ssh-keygen -t rsa -b 4096 -f ~/.ssh/new_droplet_key
```
- This creates two files:
  - **`new_droplet_key`** → Private key (DO NOT SHARE)
  - **`new_droplet_key.pub`** → Public key

### **🔹 Step 2: Copy the New Public Key to the Droplet**
1. Open the **Recovery Console** in DigitalOcean.
2. Edit the `authorized_keys` file:
   ```bash
   nano ~/.ssh/authorized_keys
   ```
3. Paste your **new public key** (from `new_droplet_key.pub`).
4. Save the file (`CTRL + X`, then `Y`, then `Enter`).
5. Set correct permissions:
   ```bash
   chmod 600 ~/.ssh/authorized_keys
   ```

### **🔹 Step 3: Connect to Your Droplet from Your PC**
Now, from your **local PC**, run:
```bash
ssh -i ~/.ssh/new_droplet_key root@your_droplet_ip
```
✅ **You should now be connected!** 🚀

---

## **3️⃣ Reset the Root Password (Alternative)**
If you prefer to use a **password instead of SSH keys**, you can reset the root password:

### **🔹 Step 1: Set a New Password in Recovery Console**
1. Inside the **Recovery Console**, run:
   ```bash
   passwd root
   ```
2. Enter a **new password** and confirm.

### **🔹 Step 2: Enable Password Login**
1. Open SSH config:
   ```bash
   nano /etc/ssh/sshd_config
   ```
2. Find:
   ```
   PasswordAuthentication no
   ```
3. Change it to:
   ```
   PasswordAuthentication yes
   ```
4. Save the file (`CTRL + X`, then `Y`, then `Enter`).
5. Restart SSH:
   ```bash
   systemctl restart ssh
   ```

### **🔹 Step 3: Connect Using Password**
Now, from your **local PC**, run:
```bash
ssh root@your_droplet_ip
```
It will prompt for a password—enter the one you just set.

---

## **🎯 Final Notes**
- **SSH key authentication** is more secure than passwords.
- If your SSH still doesn't work, check the firewall:
  ```bash
  ufw allow OpenSSH
  ufw enable
  ```

Let me know if you need help! 🚀



The **most secure and recommended approach** is to add a **new SSH key** using the **Recovery Console**. Follow these steps carefully:

---

## **🚀 Best Way to Regain Access to Your Droplet (Using a New SSH Key)**
### ✅ **Step 1: Open the DigitalOcean Recovery Console**
1. **Go to DigitalOcean Dashboard** → Click on your **Droplet**.
2. **Go to the "Access" tab**.
3. Click **"Launch Recovery Console"** (this gives you terminal access to the Droplet).

---

### ✅ **Step 2: Generate a New SSH Key on Your Local Machine**
On your **PC or Mac**, open a terminal and run:
```bash
ssh-keygen -t rsa -b 4096 -f ~/.ssh/new_droplet_key
```
- This creates two files in `~/.ssh/`:
  - **`new_droplet_key`** → Your private key (DO NOT SHARE).
  - **`new_droplet_key.pub`** → Your public key.

---

### ✅ **Step 3: Add the New Public Key to the Droplet**
1. In the **Recovery Console**, open the `authorized_keys` file:
   ```bash
   nano ~/.ssh/authorized_keys
   ```
2. On your **PC**, open `new_droplet_key.pub` and copy its contents:
   ```bash
   cat ~/.ssh/new_droplet_key.pub
   ```
3. **Paste** the copied key into the `authorized_keys` file inside the Recovery Console.
4. Save the file:
   - **Press** `CTRL + X` → **Press** `Y` → **Press** `Enter`.
5. Set correct permissions:
   ```bash
   chmod 600 ~/.ssh/authorized_keys
   ```

---

### ✅ **Step 4: Connect to the Droplet Using Your New Key**
Now, from your **local PC**, run:
```bash
ssh -i ~/.ssh/new_droplet_key root@your_droplet_ip
```
✅ **You are now connected securely!** 🚀

---

## **🎯 Why This Is the Best Approach?**
- **More Secure** than passwords.
- **Prevents Brute-Force Attacks** on SSH.
- **Follows Industry Best Practices**.

Let me know if you need any help! 🚀