To implement a payment system where a user buys a subscription plan using ReactJS and Node.js (with libraries such as Stripe for payment handling), you can use `react-stripe-js` to integrate Stripe elements such as `CardNumberElement`, `CardCvcElement`, and `CardExpiryElement`. These are Stripe's pre-built form elements for securely handling card details. Below is a simple guide on how to integrate Stripe for subscription payments.

### Steps:

#### 1. **Backend (Node.js with Express)**

First, install Stripe in your backend:

```bash
npm install stripe
```

Then, create an endpoint to handle subscription creation:

```javascript
// server.js (Node.js Backend)
const express = require('express');
const Stripe = require('stripe');
const stripe = Stripe('your-stripe-secret-key');
const app = express();

app.use(express.json());

app.post('/create-subscription', async (req, res) => {
  const { paymentMethodId, planId, customerEmail } = req.body;

  try {
    // Step 1: Create a new Stripe customer (if not already created)
    const customer = await stripe.customers.create({
      email: customerEmail,
      payment_method: paymentMethodId,
      invoice_settings: { default_payment_method: paymentMethodId },
    });

    // Step 2: Create the subscription
    const subscription = await stripe.subscriptions.create({
      customer: customer.id,
      items: [{ price: planId }],  // planId is the Price ID for the subscription
      expand: ['latest_invoice.payment_intent'],
    });

    res.send({
      clientSecret: subscription.latest_invoice.payment_intent.client_secret,
    });
  } catch (error) {
    res.status(400).send({ error: error.message });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

This backend endpoint (`/create-subscription`) receives a `paymentMethodId`, `planId`, and `customerEmail`, creates a Stripe customer, and creates a subscription for that customer.

#### 2. **Frontend (ReactJS with react-stripe-js)**

Install Stripe's React library:

```bash
npm install @stripe/react-stripe-js @stripe/stripe-js
```

Next, create the frontend component to collect the card details:

```javascript
// SubscriptionForm.js (ReactJS Frontend)
import React, { useState } from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';

const SubscriptionForm = ({ planId }) => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const stripe = useStripe();
  const elements = useElements();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!stripe || !elements) {
      return;
    }

    setLoading(true);

    // Step 1: Create PaymentMethod (CardDetails)
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: elements.getElement(CardElement),
      billing_details: { email },
    });

    if (error) {
      setLoading(false);
      alert(error.message);
      return;
    }

    // Step 2: Send paymentMethod and subscription details to the backend
    const response = await fetch('/create-subscription', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        paymentMethodId: paymentMethod.id,
        planId,
        customerEmail: email,
      }),
    });

    const { clientSecret } = await response.json();

    // Step 3: Confirm the PaymentIntent to complete the subscription
    const { error: confirmError } = await stripe.confirmCardPayment(clientSecret, {
      payment_method: paymentMethod.id,
    });

    if (confirmError) {
      alert(confirmError.message);
    } else {
      alert('Subscription successful!');
    }

    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
      />
      <CardElement />
      <button type="submit" disabled={!stripe || loading}>
        {loading ? 'Processing...' : 'Subscribe Now'}
      </button>
    </form>
  );
};

export default SubscriptionForm;
```

In this component:
- `CardElement` is used to securely collect the user's card details.
- On form submission, we create a `PaymentMethod` using `stripe.createPaymentMethod` and send it to the backend, which returns a `clientSecret`.
- We then confirm the payment using `stripe.confirmCardPayment`.

#### 3. **Stripe Setup:**
You need to create a **Price ID** in the Stripe dashboard for your subscription plan. Each plan should have a price associated with it (monthly, yearly, etc.). You can find the `Price ID` in the Stripe Dashboard under the **Billing** section.

### 4. **Wrap the Application with Stripe Elements Provider:**

In your main `App.js` or entry point:

```javascript
import React from 'react';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import SubscriptionForm from './SubscriptionForm';

const stripePromise = loadStripe('your-publishable-key-from-stripe');

const App = () => (
  <Elements stripe={stripePromise}>
    <SubscriptionForm planId="price_1Hh" /> {/* Replace with your actual plan ID */}
  </Elements>
);

export default App;
```

### Final Thoughts:
- Replace `'your-stripe-secret-key'` and `'your-publishable-key-from-stripe'` with your actual Stripe keys.
- The backend (`/create-subscription`) takes care of customer creation and subscription creation.
- The frontend uses Stripe's React library to collect payment details and handle the actual payment process.

This setup creates a basic flow for managing subscription payments using Stripe in a ReactJS app with a Node.js backend.