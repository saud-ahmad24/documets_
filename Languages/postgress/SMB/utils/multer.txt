If your file upload logic is in a `middleware` directory and you want the uploaded files to be saved in the `uploads` directory at the **root** of your project, you can achieve this by ensuring that the path to the `uploads` folder is correctly set relative to the project root.

Here’s how you can implement it:

### 1. Update the Middleware File
Assume your middleware file is located in `middleware/upload.js`.

#### `middleware/upload.js`
```javascript
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Resolve the uploads folder at the project root
const uploadFolder = path.resolve(__dirname, '../uploads');

// Ensure the uploads folder exists
if (!fs.existsSync(uploadFolder)) {
  fs.mkdirSync(uploadFolder);
}

// Multer storage configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadFolder); // Set the destination to the uploads folder
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + '-' + file.originalname); // Create a unique file name
  },
});

// Initialize and export Multer
const upload = multer({ storage });

module.exports = upload;
```

### 2. Use the Middleware in Your Route
Import and use this middleware in your routes.

#### `routes.js` (or wherever your routes are defined)
```javascript
const express = require('express');
const upload = require('./middleware/upload'); // Import the upload middleware

const router = express.Router();

// Define a route for file uploads
router.post('/upload', upload.single('file'), (req, res) => {
  try {
    res.status(200).json({
      message: 'File uploaded successfully',
      file: req.file,
    });
  } catch (error) {
    res.status(500).json({ error: 'File upload failed' });
  }
});

module.exports = router;
```

### 3. Main Application File
Make sure your route is properly included in the main server file.

#### `app.js`
```javascript
const express = require('express');
const uploadRoutes = require('./routes'); // Import your routes

const app = express();

// Use the upload routes
app.use(uploadRoutes);

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
```

### 4. Directory Structure
Here’s what your project structure should look like:

```
project-root/
│
├── app.js
├── uploads/               # Automatically created if it doesn't exist
├── middleware/
│   └── upload.js          # Your Multer middleware
├── routes.js              # Your routes
├── package.json
```

### 5. Notes
- **Dynamic Folder Creation**: The middleware ensures the `uploads` folder is created dynamically if it doesn't exist.
- **Path Resolution**: The `path.resolve(__dirname, '../uploads')` ensures that the `uploads` folder is always at the project root, no matter where the middleware is located.
- **Security Considerations**: Sanitize filenames and restrict file types as needed to enhance security.