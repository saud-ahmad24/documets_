Here’s an example of how to set up an API slice using `createApi`, `fetchBaseQuery`, and `injectEndpoints` from Redux Toolkit Query (RTK Query). This example shows how to fetch and manipulate data from an API.

### Step 1: Install Redux Toolkit
If you haven’t already, install Redux Toolkit and React-Redux:
```bash
npm install @reduxjs/toolkit react-redux
```

### Step 2: Define the API Slice
Create an API slice using `createApi`, which defines the base query and the endpoints.

```js
// src/services/api.js
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// Create an API slice
export const api = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }), // Example base URL
  endpoints: (builder) => ({
    getPosts: builder.query({
      query: () => 'posts', // Define the endpoint to fetch posts
    }),
    getPostById: builder.query({
      query: (id) => `posts/${id}`, // Fetch a single post by ID
    }),
    createPost: builder.mutation({
      query: (newPost) => ({
        url: 'posts',
        method: 'POST',
        body: newPost,
      }),
    }),
  }),
});

// Export hooks for using the queries and mutations in components
export const { useGetPostsQuery, useGetPostByIdQuery, useCreatePostMutation } = api;
```

### Step 3: Add the API Reducer to the Store
In your Redux store, include the API slice reducer.

```js
// src/store.js
import { configureStore } from '@reduxjs/toolkit';
import { api } from './services/api';

export const store = configureStore({
  reducer: {
    [api.reducerPath]: api.reducer, // Add the api reducer
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(api.middleware), // Add the api middleware
});
```

### Step 4: Use the API Hooks in Components
Now you can use the hooks `useGetPostsQuery`, `useGetPostByIdQuery`, and `useCreatePostMutation` in your components.

```js
// src/components/Posts.js
import React from 'react';
import { useGetPostsQuery, useCreatePostMutation } from '../services/api';

const Posts = () => {
  // Fetch posts
  const { data: posts, error, isLoading } = useGetPostsQuery();

  // Mutation for creating a post
  const [createPost, { isLoading: isCreating }] = useCreatePostMutation();

  // Handle form submission
  const handleCreatePost = async () => {
    const newPost = { title: 'New Post', body: 'This is a new post.' };
    await createPost(newPost); // Create a new post
  };

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error loading posts</p>;

  return (
    <div>
      <h1>Posts</h1>
      <button onClick={handleCreatePost} disabled={isCreating}>
        {isCreating ? 'Creating...' : 'Create New Post'}
      </button>
      <ul>
        {posts?.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default Posts;
```

### Step 5: Wrap the App with the Redux Provider
Make sure your app is wrapped with the `Provider` from `react-redux` and pass in the `store`.

```js
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { store } from './store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
```

### Explanation
- **`createApi`**: Defines the API slice and the endpoints. It handles queries (`GET` requests) and mutations (`POST`, `PUT`, etc.) to interact with an API.
- **`fetchBaseQuery`**: A utility function that creates the base query with a specified base URL.
- **`injectEndpoints`**: Automatically adds the API endpoints into your app and generates React hooks for data fetching and mutations.

This setup lets you manage API data with ease, utilizing caching, optimistic updates, and more, all out-of-the-box.