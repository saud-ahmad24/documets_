Here are some examples of when and how you can use **React state**, **Context API**, and **custom hooks** for API calls instead of Redux. These methods are useful when you don’t need global state management or when the data is local to a specific component or part of your app.

### 1. **Using React State and `useEffect` for Local Data Fetching**

For simple API calls that are needed only in a single component, React’s `useState` and `useEffect` are perfect. They provide a straightforward way to handle fetching data and managing loading and error states locally within a component.

#### Example: Fetching User Data in a Profile Page

```javascript
import React, { useState, useEffect } from 'react';

const UserProfile = ({ userId }) => {
    const [userData, setUserData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const response = await fetch(`/api/users/${userId}`);
                if (!response.ok) throw new Error('Failed to fetch data');
                const data = await response.json();
                setUserData(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchUserData();
    }, [userId]);

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;

    return (
        <div>
            <h1>{userData.name}</h1>
            <p>{userData.email}</p>
            {/* Render other user data */}
        </div>
    );
};

export default UserProfile;
```

### 2. **Using React Context API for Global State (Simple Use Case)**

The **Context API** can be useful when you want to share the state of an API call across multiple components without the complexity of Redux. For example, if you need to fetch user data and make it available across different parts of your app, the Context API is a good option.

#### Example: User Context for User Data

1. **Create the User Context**:

```javascript
import React, { createContext, useState, useEffect, useContext } from 'react';

const UserContext = createContext();

export const useUser = () => {
    return useContext(UserContext);
};

export const UserProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const response = await fetch('/api/user');
                if (!response.ok) throw new Error('Failed to fetch user data');
                const data = await response.json();
                setUser(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchUserData();
    }, []);

    return (
        <UserContext.Provider value={{ user, loading, error }}>
            {children}
        </UserContext.Provider>
    );
};
```

2. **Use Context in Any Component**:

```javascript
import React from 'react';
import { useUser } from './UserContext';

const UserProfile = () => {
    const { user, loading, error } = useUser();

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;

    return (
        <div>
            <h1>{user.name}</h1>
            <p>{user.email}</p>
        </div>
    );
};

export default UserProfile;
```

3. **Wrap Your Application with the Provider**:

In your app’s entry point (e.g., `App.js`), wrap your app with the `UserProvider`:

```javascript
import React from 'react';
import { UserProvider } from './UserContext';
import UserProfile from './UserProfile';

function App() {
    return (
        <UserProvider>
            <UserProfile />
        </UserProvider>
    );
}

export default App;
```

### 3. **Using Custom Hooks for Reusable Logic**

A **custom hook** allows you to reuse logic like data fetching across different components without repeating the code. This is especially useful when you have multiple components that need to make similar API calls.

#### Example: Creating a Custom Hook for Fetching Data

1. **Custom Hook for Fetching Data**:

```javascript
import { useState, useEffect } from 'react';

const useFetch = (url) => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Failed to fetch data');
                const result = await response.json();
                setData(result);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [url]);

    return { data, loading, error };
};

export default useFetch;
```

2. **Using the Custom Hook in Multiple Components**:

```javascript
import React from 'react';
import useFetch from './useFetch';

const ProductList = () => {
    const { data, loading, error } = useFetch('/api/products');

    if (loading) return <div>Loading products...</div>;
    if (error) return <div>Error: {error}</div>;

    return (
        <div>
            {data.map((product) => (
                <div key={product.id}>
                    <h3>{product.name}</h3>
                    <p>{product.description}</p>
                </div>
            ))}
        </div>
    );
};

export default ProductList;
```

You can use this same `useFetch` hook in any component where you need to fetch data from an API. This centralizes your data-fetching logic and makes it reusable.

### When to Use These Methods:

- **Use React state (`useState` + `useEffect`)** for simple, isolated API calls where the data is only needed in a single component and doesn’t need to be shared globally.
  
- **Use React Context API** when you need to share API data across multiple components without a global state management solution like Redux. It’s ideal for situations like authentication, user profile data, or theme preferences.

- **Use Custom Hooks** for reusable API logic that can be shared across multiple components. Custom hooks can help simplify your component logic by isolating side effects like data fetching, making your code cleaner and more modular.

### Summary:

- **React State**: Best for local data fetching within a single component.
- **Context API**: Useful when you need to share API data across multiple components but don’t want to use Redux.
- **Custom Hooks**: Great for reusable logic, especially when multiple components need to perform similar API calls.

These methods offer lightweight alternatives to Redux and work well for simpler apps or isolated data requirements.