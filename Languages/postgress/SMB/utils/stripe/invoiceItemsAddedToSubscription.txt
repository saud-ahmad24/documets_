If you want to add multiple subscriptions and multiple one-off invoice items to a customer, you will need to modify your API to handle the creation of several subscriptions and invoice items at once.

To achieve this, you can:

1. **Add Multiple Subscriptions**: Create multiple subscription items for the same customer, each with different price IDs (representing different subscription plans).
2. **Add Multiple One-Off Invoice Items**: Add multiple one-off charges to the customer by creating multiple invoice items before finalizing the invoice.

Here’s how you can modify the backend code to handle multiple subscriptions and one-off items.

### Backend Code (Node.js with Stripe)

```javascript
const express = require('express');
const Stripe = require('stripe');
const cors = require('cors');
require('dotenv').config();

const app = express();
const stripe = Stripe(process.env.STRIPE_SECRET_KEY); // Your Stripe Secret Key (use .env for security)

app.use(cors());
app.use(express.json());

// Endpoint to create multiple subscriptions and invoice items
app.post('/create-multiple-subscriptions', async (req, res) => {
  const { customerId, subscriptions, invoiceItems } = req.body;

  try {
    // Step 1: Create multiple invoice items (one-time charges)
    for (const item of invoiceItems) {
      await stripe.invoiceItems.create({
        customer: customerId, // Customer ID
        amount: item.amount * 100, // Convert to cents
        currency: 'usd', // Currency for the charge
        description: item.description, // Description for the charge
      });
      console.log('Invoice item created:', item.description);
    }

    // Step 2: Create multiple subscriptions
    const subscriptionItems = subscriptions.map((sub) => ({
      price: sub.priceId, // Price ID for the subscription
      quantity: sub.quantity, // Quantity of the subscription
    }));

    const subscription = await stripe.subscriptions.create({
      customer: customerId, // Customer ID
      items: subscriptionItems, // Array of subscription items
      expand: ['latest_invoice.payment_intent'], // Expand to get invoice and payment details
    });

    console.log('Multiple subscriptions created:', subscription);

    // Step 3: Finalize the invoice if necessary
    const invoice = await stripe.invoices.retrieve(subscription.latest_invoice.id);
    if (invoice.status === 'draft') {
      const finalizedInvoice = await stripe.invoices.finalizeInvoice(invoice.id);
      console.log('Invoice finalized:', finalizedInvoice);
    }

    res.status(200).json({ subscription, message: 'Multiple subscriptions and invoice items created' });
  } catch (error) {
    console.error('Error creating subscriptions or invoice items:', error);
    res.status(500).json({ error: 'Failed to create subscriptions or invoice items' });
  }
});

// Server setup
const port = 3001;
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
```

### Explanation of the Code:

#### 1. **Multiple One-Off Invoice Items**

In the code, you send an array of `invoiceItems` in the request body. Each `invoiceItem` will represent a one-time charge that is added to the invoice for the customer.

- `amount`: The amount for the one-time charge (multiplied by 100 to convert dollars to cents).
- `description`: A description of what the charge is for (e.g., "One-time charge for extra service").

The code loops over the `invoiceItems` array and creates an invoice item for each entry. This allows you to add as many one-off charges as needed.

#### 2. **Multiple Subscriptions**

You also send an array of `subscriptions` in the request body. Each subscription will have a `priceId` and `quantity`, representing the subscription plan and how many units of that plan the customer is subscribing to.

- `price`: The price ID associated with the subscription product.
- `quantity`: The quantity of the subscription (you might want to handle this if you're offering multiple quantities of the same product).

The code then maps over the `subscriptions` array and creates an array of subscription items, which is used to create a subscription for the customer.

#### 3. **Finalize the Invoice**

After creating the subscriptions and adding invoice items, the code retrieves the latest invoice and checks if its status is `draft`. If the invoice is in draft mode, it finalizes the invoice, which means that Stripe will attempt to charge the customer.

### 3. Request Body Example

Here’s an example of the JSON request body you would send to this endpoint to create multiple subscriptions and one-off items:

```json
{
  "customerId": "cus_J5nH9YhGb8Jhpm", 
  "subscriptions": [
    {
      "priceId": "price_1JYOsu2eZvKYlo2Cp9s3F33h", 
      "quantity": 1
    },
    {
      "priceId": "price_1JYOsu2eZvKYlo2Cp9s3F34j", 
      "quantity": 2
    }
  ],
  "invoiceItems": [
    {
      "amount": 50, 
      "description": "One-time setup fee"
    },
    {
      "amount": 100, 
      "description": "Additional feature charge"
    }
  ]
}
```

- **customerId**: The Stripe customer ID of the customer you're adding subscriptions and invoice items for.
- **subscriptions**: An array of subscription objects. Each subscription contains a `priceId` (the ID of the subscription plan you want to subscribe the customer to) and a `quantity` (how many units of that plan the customer is subscribing to).
- **invoiceItems**: An array of one-time invoice items. Each item contains an `amount` (the charge amount) and a `description` (a description of the charge).

### 4. Testing the API

You can test this endpoint using a tool like Postman or cURL by sending a `POST` request to `http://localhost:3001/create-multiple-subscriptions` with the above JSON body.

### 5. Additional Notes:

- **Handling Payment**: After the invoice is finalized, you can either use the `payment_intent` returned from the expanded subscription object to handle payments, or you can use Stripe Checkout or Elements to collect payment details.
- **Automatic Invoice Finalization**: In the code, we manually finalize the invoice by checking if its status is `draft`. If you'd like to handle this process automatically (e.g., finalize and attempt payment), you can adjust the flow based on your needs.
- **Error Handling**: Ensure you have proper error handling for edge cases, such as invalid price IDs, customer IDs, or invalid amounts.

With this approach, you can handle multiple subscriptions and one-off items, giving you flexibility in managing complex billing scenarios using Stripe.