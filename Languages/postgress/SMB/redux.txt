To manage state like authentication and API calls using **Redux**, you'll follow a slightly different approach. Redux allows you to store global state in a centralized store, providing more control over state changes through actions and reducers. Below is a step-by-step guide to implement authentication and API calls with Redux.

### 1. Install Redux and Redux Toolkit

First, make sure to install Redux and Redux Toolkit. Redux Toolkit simplifies the setup process and reduces boilerplate code.

```bash
npm install @reduxjs/toolkit react-redux
```

### 2. Set Up Redux Store

You need to set up a Redux store that will hold the state for authentication and API data. You can create a store and slices (reducer logic) for different parts of the app.

#### Step 1: Create Redux Slice for Authentication

Create a slice to handle authentication logic.

```javascript
// src/features/auth/authSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  user: null,
  isAuthenticated: false,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    login: (state, action) => {
      state.user = action.payload.user;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.user = null;
      state.isAuthenticated = false;
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;
```

#### Step 2: Create Redux Slice for API Data

Now, create another slice to manage data fetched from an API.

```javascript
// src/features/products/productSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  products: [],
  loading: false,
  error: null,
};

const productSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {
    fetchProductsStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchProductsSuccess: (state, action) => {
      state.products = action.payload;
      state.loading = false;
    },
    fetchProductsFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const { fetchProductsStart, fetchProductsSuccess, fetchProductsFailure } = productSlice.actions;
export default productSlice.reducer;
```

#### Step 3: Configure Redux Store

Now, configure the store to include these slices.

```javascript
// src/app/store.js
import { configureStore } from '@reduxjs/toolkit';
import authReducer from '../features/auth/authSlice';
import productReducer from '../features/products/productSlice';

const store = configureStore({
  reducer: {
    auth: authReducer,
    products: productReducer,
  },
});

export default store;
```

### 3. Provide Redux Store to the App

Wrap your application with the `Provider` component from `react-redux` to give the app access to the Redux store.

```javascript
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './app/store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
```

### 4. Dispatch Actions and Use Redux State in Components

You can now dispatch actions and use the state from the Redux store in your components.

#### Step 1: Use Redux in the Login Component

In the `Login` component, you'll dispatch the `login` action to update the Redux state when the user logs in.

```javascript
// src/components/LoginButton.js
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { login } from '../features/auth/authSlice';

function LoginButton() {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const dispatch = useDispatch();

  const handleLogin = async () => {
    // Simulate API call to authenticate
    const response = await fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(credentials),
    });
    const data = await response.json();

    // Dispatch the login action
    dispatch(login({ user: data.user }));
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Username"
        value={credentials.username}
        onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}
      />
      <input
        type="password"
        placeholder="Password"
        value={credentials.password}
        onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}
      />
      <button onClick={handleLogin}>Login</button>
    </div>
  );
}

export default LoginButton;
```

#### Step 2: Use Redux in the Product Component

In the `ProductList` component, you will dispatch actions to fetch products and display them.

```javascript
// src/components/ProductList.js
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchProductsStart, fetchProductsSuccess, fetchProductsFailure } from '../features/products/productSlice';

function ProductList() {
  const dispatch = useDispatch();
  const { products, loading, error } = useSelector((state) => state.products);

  useEffect(() => {
    const fetchProducts = async () => {
      dispatch(fetchProductsStart());
      try {
        const response = await fetch('/api/products');
        const data = await response.json();
        dispatch(fetchProductsSuccess(data));
      } catch (err) {
        dispatch(fetchProductsFailure('Failed to load products.'));
      }
    };

    fetchProducts();
  }, [dispatch]);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>{error}</p>;

  return (
    <ul>
      {products.map((product) => (
        <li key={product.id}>{product.name}</li>
      ))}
    </ul>
  );
}

export default ProductList;
```

### 5. Using Authentication State in Other Components

To use authentication state (e.g., show login/logout buttons), you can access the `user` and `isAuthenticated` state from Redux.

```javascript
// src/components/LogoutButton.js
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { logout } from '../features/auth/authSlice';

function LogoutButton() {
  const dispatch = useDispatch();
  const { isAuthenticated } = useSelector((state) => state.auth);

  const handleLogout = () => {
    dispatch(logout());
  };

  if (!isAuthenticated) return null;

  return <button onClick={handleLogout}>Logout</button>;
}

export default LogoutButton;
```

### Summary

In this setup:
- **Redux slices** handle different parts of your application state (e.g., authentication, products).
- **Actions** are dispatched to modify state (e.g., login, logout, fetch products).
- **`useSelector`** is used to access state in components.
- **`useDispatch`** is used to dispatch actions to update the state.

This approach allows you to manage global state with Redux and handle side effects (like API calls) in a more organized and scalable way.