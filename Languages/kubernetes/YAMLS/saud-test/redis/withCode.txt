Here are some Redis use cases, each with code examples to illustrate how to implement them.

### 1. **Caching**
Redis is often used to cache database query results, API responses, or other frequently accessed data.

```js
const redis = require("redis");
const client = redis.createClient();

// Function to get data from cache
async function getFromCache(key) {
    return new Promise((resolve, reject) => {
        client.get(key, (err, result) => {
            if (err) return reject(err);
            resolve(result);
        });
    });
}

// Store data in cache with an expiration time
async function setCache(key, value, ttl = 3600) {  // 1 hour
    client.setex(key, ttl, value);
}

// Example usage
async function fetchData() {
    const cacheKey = 'some-api-response';
    let data = await getFromCache(cacheKey);
    
    if (!data) {
        // If not in cache, fetch from source (e.g., an API or database)
        data = 'fetched data';  // Simulating API response
        setCache(cacheKey, data);  // Cache the result
    }
    
    return data;
}

fetchData().then(console.log);
```

### 2. **Session Management**
Redis is commonly used to store session data due to its fast read/write capabilities.

```js
const session = require('express-session');
const RedisStore = require('connect-redis')(session);

app.use(session({
  store: new RedisStore({ client }),
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: true }
}));

// Now session data is stored in Redis
```

### 3. **Pub/Sub Messaging**
Redis can be used to build a real-time messaging system between services.

```js
const redis = require('redis');
const pub = redis.createClient();
const sub = redis.createClient();

// Subscribe to a channel
sub.subscribe('news-channel');

// Listening to messages on the channel
sub.on('message', (channel, message) => {
    console.log(`Received message: ${message} on channel: ${channel}`);
});

// Publish a message to the channel
pub.publish('news-channel', 'Breaking news: Redis is awesome!');
```

### 4. **Rate Limiting**
You can use Redis to implement API rate limiting.

```js
const redis = require('redis');
const client = redis.createClient();

async function rateLimit(key, limit, ttl) {
    return new Promise((resolve, reject) => {
        client.multi()
            .incr(key)
            .expire(key, ttl)
            .exec((err, replies) => {
                if (err) return reject(err);
                const count = replies[0];
                resolve(count <= limit);  // True if under limit
            });
    });
}

async function apiRequestHandler(req, res) {
    const ip = req.ip;
    const isAllowed = await rateLimit(ip, 100, 60); // 100 requests per minute

    if (!isAllowed) {
        return res.status(429).send('Too many requests');
    }
    
    // Process API request
    res.send('API response');
}
```

### 5. **Message Queues**
Redis can be used to implement a lightweight queue system.

```js
// Producer: Adding tasks to a Redis queue
async function addTask(task) {
    client.rpush('task_queue', task);
}

// Consumer: Fetching and processing tasks
async function processTasks() {
    while (true) {
        client.blpop('task_queue', 0, (err, task) => {
            if (task) {
                console.log('Processing task:', task[1]);
                // Handle the task
            }
        });
    }
}

addTask('Task 1');
processTasks();
```

### 6. **Leaderboard**
Using Redis sorted sets to maintain a leaderboard.

```js
// Adding users to the leaderboard
client.zadd('leaderboard', 100, 'user1');
client.zadd('leaderboard', 200, 'user2');

// Get the top users
client.zrevrange('leaderboard', 0, -1, 'WITHSCORES', (err, leaderboard) => {
    console.log('Leaderboard:', leaderboard);
});
```

### 7. **Geospatial Queries**
Redis provides geospatial features for location-based data.

```js
// Adding locations (latitude, longitude) with names
client.geoadd('locations', 13.361389, 38.115556, 'Palermo');
client.geoadd('locations', 15.087269, 37.502669, 'Catania');

// Find locations within a radius
client.georadius('locations', 15, 37, 100, 'km', (err, locations) => {
    console.log('Nearby locations:', locations);
});
```

### 8. **Distributed Locking**
Redis can be used to implement distributed locks for critical sections.

```js
const { promisify } = require('util');
const redis = require('redis');
const client = redis.createClient();
const setAsync = promisify(client.set).bind(client);

async function acquireLock(key, value, ttl) {
    const result = await setAsync(key, value, 'NX', 'PX', ttl);
    return result === 'OK';
}

// Acquiring a lock
const isLocked = await acquireLock('resource_key', 'unique_value', 5000);
if (isLocked) {
    console.log('Lock acquired');
    // Perform critical task
} else {
    console.log('Could not acquire lock');
}
```

### 9. **Full-Text Search with RediSearch (Module)**
RediSearch is an external module to Redis for full-text search. Here's a simplified example (installation and additional setup required):

```js
// Adding documents for search
client.hset('doc:1', 'title', 'Hello World', 'content', 'This is a test document');
client.hset('doc:2', 'title', 'Redis is Fast', 'content', 'This document talks about Redis');

// Searching documents
client.ft.search('index', 'Redis', (err, documents) => {
    console.log('Search results:', documents);
});
```

### 10. **Real-Time Notifications**
Redis Pub/Sub can also handle real-time notifications in web applications.

```js
// Subscriber listens to notifications
sub.subscribe('notification-channel');
sub.on('message', (channel, message) => {
    console.log(`New notification: ${message}`);
});

// Publisher sends notifications
pub.publish('notification-channel', 'New user signed up!');
```

Each use case demonstrates Redisâ€™s speed and versatility for handling a wide range of tasks like caching, session management, rate-limiting, real-time notifications, and distributed locks.