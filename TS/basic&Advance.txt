Sure, let's start with a basic introduction to TypeScript and then move on to more advanced topics.

### Basic TypeScript Tutorial

#### Introduction
TypeScript is a superset of JavaScript that adds static typing. It helps catch errors early through a type system and makes JavaScript development more predictable.

#### Setting Up
1. **Install TypeScript**:
   ```bash
   npm install -g typescript
   ```

2. **Initialize a TypeScript project**:
   ```bash
   mkdir my-project
   cd my-project
   tsc --init
   ```

3. **Create a `tsconfig.json`**:
   ```json
   {
     "compilerOptions": {
       "target": "es5",
       "module": "commonjs",
       "strict": true,
       "esModuleInterop": true
     }
   }
   ```

4. **Create a TypeScript file**:
   ```ts
   // index.ts
   const greeting: string = "Hello, TypeScript!";
   console.log(greeting);
   ```

5. **Compile TypeScript**:
   ```bash
   tsc
   ```

6. **Run the compiled JavaScript**:
   ```bash
   node index.js
   ```

#### Basic Concepts
1. **Types**:
   ```ts
   let isDone: boolean = false;
   let decimal: number = 6;
   let color: string = "blue";
   let list: number[] = [1, 2, 3];
   let x: [string, number] = ["hello", 10];
   enum Color { Red, Green, Blue }
   let c: Color = Color.Green;
   ```

2. **Interfaces**:
   ```ts
   interface Person {
     firstName: string;
     lastName: string;
   }

   function greeter(person: Person) {
     return "Hello, " + person.firstName + " " + person.lastName;
   }

   let user = { firstName: "Jane", lastName: "Doe" };
   console.log(greeter(user));
   ```

3. **Classes**:
   ```ts
   class Greeter {
     greeting: string;
     constructor(message: string) {
       this.greeting = message;
     }
     greet() {
       return "Hello, " + this.greeting;
     }
   }

   let greeter = new Greeter("world");
   console.log(greeter.greet());
   ```

4. **Modules**:
   ```ts
   // Exporting
   export class User {
     name: string;
     constructor(name: string) {
       this.name = name;
     }
   }

   // Importing
   import { User } from './user';
   let user = new User("Jane Doe");
   console.log(user.name);
   ```

### Advanced TypeScript Tutorial

#### Advanced Types
1. **Intersection Types**:
   ```ts
   interface ErrorHandling {
     success: boolean;
     error?: { message: string };
   }

   interface ArtworksData {
     artworks: { title: string }[];
   }

   type ArtworksResponse = ArtworksData & ErrorHandling;
   ```

2. **Union Types**:
   ```ts
   function padLeft(value: string, padding: string | number) {
     if (typeof padding === "number") {
       return Array(padding + 1).join(" ") + value;
     }
     if (typeof padding === "string") {
       return padding + value;
     }
     throw new Error(`Expected string or number, got '${typeof padding}'.`);
   }
   ```

3. **Type Guards and Differentiating Types**:
   ```ts
   interface Bird {
     fly(): void;
     layEggs(): void;
   }

   interface Fish {
     swim(): void;
     layEggs(): void;
   }

   function getRandomPet(): Fish | Bird {
     // ...
   }

   let pet = getRandomPet();

   if ("swim" in pet) {
     pet.swim();
   } else {
     pet.fly();
   }
   ```

#### Generics
1. **Generic Functions**:
   ```ts
   function identity<T>(arg: T): T {
     return arg;
   }

   let output = identity<string>("myString");
   let output2 = identity<number>(100);
   ```

2. **Generic Classes**:
   ```ts
   class GenericNumber<T> {
     zeroValue: T;
     add: (x: T, y: T) => T;
   }

   let myGenericNumber = new GenericNumber<number>();
   myGenericNumber.zeroValue = 0;
   myGenericNumber.add = function (x, y) {
     return x + y;
   };
   ```

3. **Generic Constraints**:
   ```ts
   interface Lengthwise {
     length: number;
   }

   function loggingIdentity<T extends Lengthwise>(arg: T): T {
     console.log(arg.length);
     return arg;
   }

   loggingIdentity({ length: 10, value: 3 });
   ```

#### Advanced Features
1. **Decorators**:
   ```ts
   function sealed(constructor: Function) {
     Object.seal(constructor);
     Object.seal(constructor.prototype);
   }

   @sealed
   class Greeter {
     greeting: string;
     constructor(message: string) {
       this.greeting = message;
     }
     greet() {
       return "Hello, " + this.greeting;
     }
   }
   ```

2. **Mixins**:
   ```ts
   class Disposable {
     isDisposed: boolean = false;
     dispose() {
       this.isDisposed = true;
     }
   }

   class Activatable {
     isActive: boolean = false;
     activate() {
       this.isActive = true;
     }
     deactivate() {
       this.isActive = false;
     }
   }

   class SmartObject implements Disposable, Activatable {
     isDisposed: boolean = false;
     isActive: boolean = false;
     dispose: () => void;
     activate: () => void;
     deactivate: () => void;

     constructor() {
       setInterval(() => console.log(this.isActive + " : " + this.isDisposed), 500);
     }
   }

   applyMixins(SmartObject, [Disposable, Activatable]);

   function applyMixins(derivedCtor: any, baseCtors: any[]) {
     baseCtors.forEach(baseCtor => {
       Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
         derivedCtor.prototype[name] = baseCtor.prototype[name];
       });
     });
   }

   let smartObj = new SmartObject();
   setTimeout(() => smartObj.activate(), 1000);
   setTimeout(() => smartObj.dispose(), 2000);
   ```

#### Working with TypeScript in Node.js
1. **Using TypeScript with Express**:
   ```ts
   import express, { Request, Response } from 'express';

   const app = express();
   const port = 3000;

   app.get('/', (req: Request, res: Response) => {
     res.send('Hello, TypeScript with Express!');
   });

   app.listen(port, () => {
     console.log(`Server is running at http://localhost:${port}`);
   });
   ```

2. **Debugging TypeScript in VS Code**:
   ```json
   // .vscode/launch.json
   {
     "version": "0.2.0",
     "configurations": [
       {
         "type": "node",
         "request": "launch",
         "name": "Launch Program",
         "skipFiles": ["<node_internals>/**"],
         "program": "${workspaceFolder}/index.ts",
         "preLaunchTask": "tsc: build - tsconfig.json",
         "outFiles": ["${workspaceFolder}/**/*.js"]
       }
     ]
   }
   ```

### Further Learning Resources
- **TypeScript Official Documentation**: [TypeScript Documentation](https://www.typescriptlang.org/docs/)
- **TypeScript Deep Dive** by Basarat Ali Syed: [TypeScript Deep Dive](https://basarat.gitbook.io/typescript/)
- **TypeScript Handbook**: [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)

This should give you a solid foundation and help you get started with both basic and advanced TypeScript development.